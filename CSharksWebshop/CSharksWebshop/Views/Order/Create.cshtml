@model CSharksWebshop.Models.Order
@using CSharksWebshop.Models;
@using CSharksWebshop.DataModels;

@{
    ViewBag.Title = "Create";
    string OrderTime = DateTime.Now.ToString();
    string UserID = UserAuthentication.WhoAmI(User, Session);
    UserData currentUser = null;
    string FirstName = "";
    string LastName = "";
    string PostCode = "";
    string Street = "";
    string City = "";
    string HouseNumber = "";
    string UserEmail = "";
    List<Address> addresses = null;
    if (User.Identity.IsAuthenticated)
    {
        WebshopModel db = new WebshopModel();
        currentUser = db.UserDatas.Where(x => x.UserEmail == User.Identity.Name).FirstOrDefault();
        FirstName = currentUser.FirstName;
        LastName = currentUser.LastName;
        PostCode = currentUser.PostCode;
        Street = currentUser.Street;
        City = currentUser.City;
        HouseNumber = currentUser.HouseNumber;
        UserEmail = currentUser.UserEmail;
        addresses = Order.UserAddresses(User);
    }


}

<div class="container">
    <div class="row">

        <div class="col-sm-6 col-md-5 col-lg-12 mx-auto">
            <h4>Order</h4>
            <hr />
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div style="display:none" class="form-group">
                        @Html.LabelFor(model => model.OrderTime, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => OrderTime, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.OrderTime, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div style="display:none" class="form-group">
                        @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => UserID, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @if (User.Identity.IsAuthenticated == false)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PostCode, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => PostCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PostCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => Street, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => City, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.HouseNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.HouseNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => UserEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    else
    {
        <div>Last name: @LastName</div>
        <div>First name: @FirstName</div>
        for (int i = 0; i < addresses.Count; i++)
        {
            <div class="card bg-light mb-3" style="max-width: 20rem;">
                <div class="card-header">
                    @if (i == 0)
                    {
                        <input type="radio" id="@addresses[i].ID" name="RegisteredUserCreate" value="@addresses[i].ID" checked/>
                    }
                    else
                    {
                        <input type="radio" id="@addresses[i].ID" name="RegisteredUserCreate" value="@addresses[i].ID" />
                    }

                    Address @(i + 1)
                </div>
                <div class="card-body">
                    <p class="card-text">Zip code: @addresses[i].ZipCode</p>
                    <p class="card-text">City: @addresses[i].City</p>
                    <p class="card-text">Street: @addresses[i].Street</p>
                    <p class="card-text">Hous number @addresses[i].HouseNumber</p>
                </div>
            </div>
        }
        <div>E-mail: @UserEmail</div>
    }


                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Confirm" class="btn  btn-primary" />
                        </div>
                    </div>
                </div>
            }


        </div>
    </div>

